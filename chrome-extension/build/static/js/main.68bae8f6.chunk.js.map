{"version":3,"sources":["types/theme.ts","components/button/button.tsx","app.tsx","index.tsx"],"names":["ColorPalette","Gradient","Contrast","mouseDown","transitionFinished","button","isColorPalette","object","Object","values","indexOf","isContrast","isGradient","handleTextColor","textColor","fallbackColor","undefined","TextButton","props","style","computedBackgroundColor","backgroundColor","Primary","backgroundImage","color","Accent","Warning","getColorPaletteComplement","contrastColor","handleContrastColor","onHoverContrastColor","gradient","getGradientComplement","handleContrastColorImage","document","onmouseup","mouseEvent","stopPropagation","classList","remove","className","onMouseDown","currentTarget","buttons","transitionDuration","window","getComputedStyle","add","setTimeout","parseFloat","substring","onMouseUp","onClick","href","location","assign","unselectable","text","App","documentElement","setAttribute","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.68bae8f6.chunk.js","sourcesContent":["/*\n\n    When implmenting a new enum value, make sure to use the name of the CSS variable and set the value to the name of the variable. \n    See below for examples.\n\n*/\n\nexport enum ColorPalette {\n    Primary = \"primary\",\n    Accent = \"accent\",\n    Warning = \"warning\",\n}\n\nexport enum Gradient {\n    Primary = \"primary\",\n}\n\nexport enum Contrast {\n    Dark = \"dark\",\n    Light = \"light\",\n}\n\n// Return the complement of a ColorPalette value\nexport const getColorPaletteComplement = (\n    color: ColorPalette,\n): ColorPalette => {\n    switch (color) {\n        case ColorPalette.Primary:\n            return ColorPalette.Accent;\n        case ColorPalette.Accent:\n            return ColorPalette.Primary;\n        case ColorPalette.Warning:\n            return ColorPalette.Accent;\n    }\n};\n\n// Return the complement of a Contrast value\nexport const getContrastComplement = (contrast: Contrast): Contrast => {\n    switch (contrast) {\n        case Contrast.Dark:\n            return Contrast.Light;\n        case Contrast.Light:\n            return Contrast.Dark;\n    }\n};\n\n// Return the complement of a Gradient value\nexport const getGradientComplement = (gradient: Gradient): ColorPalette => {\n    switch (gradient) {\n        case Gradient.Primary:\n            return ColorPalette.Accent;\n    }\n};\n\n// ColorPalette enum type guard\nexport const isColorPalette = (object: any): object is ColorPalette => {\n    return Object.values(ColorPalette).indexOf(object) !== -1;\n};\n\n// Contrast enum type guard\nexport const isContrast = (object: any): object is Contrast => {\n    return Object.values(Contrast).indexOf(object) !== -1;\n};\n\n// Gradient enum type guard\nexport const isGradient = (object: any): object is Gradient => {\n    return Object.values(Gradient).indexOf(object) !== -1;\n};\n","import React, { MouseEvent } from \"react\";\nimport {\n    ColorPalette,\n    Contrast,\n    getColorPaletteComplement,\n    getGradientComplement,\n    Gradient,\n    isColorPalette,\n    isContrast,\n    isGradient,\n} from \"../../types/theme\";\nimport * as CSS from \"csstype\";\nimport \"./button.css\";\n\n// Shorthand property types\nexport type BackgroundColor = ColorPalette | CSS.Property.BackgroundColor;\nexport type BackgroundImage = Gradient | CSS.Property.BackgroundImage;\nexport type TextColor = ColorPalette | CSS.Property.Color;\nexport type ContrastColor = Contrast | CSS.Property.BackgroundColor;\n\n//  TextButton input properties\nexport interface TextButtonProp extends React.HTMLAttributes<HTMLDivElement> {\n    // Required | Content of the button. Accepts a string value.\n    text: string;\n\n    // Optional (default: ColorPalette.Primary) | Background color of the button. Accepts a ColorPalette enum value or a CSS background color value.\n    backgroundColor?: BackgroundColor;\n\n    // Optional (default: undefined) | Background image of the button. Accepts a Gradient enum value or a CSS background image value.\n    backgroundImage?: BackgroundImage;\n\n    // Optional (default: ColorPalette.Accent) | Text color of the button. Accepts a ColorPalette enum value or a CSS color value.\n    textColor?: TextColor;\n\n    // Optional (default: Contrast.Default) | Color of the background on hover. Accepts a Contrast enum value or a CSS background color value.\n    onHoverContrastColor?: ContrastColor;\n\n    // Optional | URL to redirect to. Accepts a string value.\n    href?: string;\n\n    // Optional | Callback function to execute when the button is clicked. Accepts a void function with a MouseEvent parameter.\n    onClick?: (event: MouseEvent) => void;\n}\n\ninterface Properties extends CSS.Properties {\n    \"--on-hover-background-color\"?: CSS.Property.BackgroundColor;\n    \"--on-hover-background-image\"?: CSS.Property.BackgroundImage;\n}\n\n//  Handle various cases of input properties for a TextColor\nconst handleTextColor = (\n    textColor: TextColor | undefined,\n    fallbackColor: ColorPalette,\n): CSS.Property.Color => {\n    if (textColor === undefined) {\n        return `var(--${fallbackColor}-color)`;\n    } else if (isColorPalette(textColor)) {\n        return `var(--${textColor}-color)`;\n    }\n\n    return textColor;\n};\n\n//  Handle various cases of input properties for a ContrastColor\nconst handleContrastColor = (\n    backgroundColor: BackgroundColor,\n    contrastColor: ContrastColor | undefined,\n): CSS.Property.Color => {\n    if (isColorPalette(backgroundColor)) {\n        if (contrastColor === undefined) {\n            return `var(--${backgroundColor}-color-contrast)`;\n        } else if (isContrast(contrastColor)) {\n            return `var(--${backgroundColor}-color-${contrastColor})`;\n        }\n    } else if (\n        contrastColor === undefined ||\n        isContrast(contrastColor) ||\n        isColorPalette(contrastColor)\n    ) {\n        return backgroundColor;\n    }\n\n    return contrastColor;\n};\n\n//  Handle various cases of input properties for a ContrastColor\nconst handleContrastColorImage = (\n    backgroundImage: BackgroundImage,\n    contrastColor: ContrastColor | undefined,\n): CSS.Property.Color => {\n    if (isGradient(backgroundImage)) {\n        if (contrastColor === undefined) {\n            return `var(--${backgroundImage}-color-gradient-contrast)`;\n        } else if (isContrast(contrastColor)) {\n            return `var(--${backgroundImage}-color-gradient-${contrastColor})`;\n        }\n    } else if (\n        contrastColor === undefined ||\n        isContrast(contrastColor) ||\n        isColorPalette(contrastColor)\n    ) {\n        return backgroundImage;\n    }\n\n    return contrastColor;\n};\n\nlet mouseDown: boolean;\nlet transitionFinished: boolean;\nlet button: HTMLDivElement;\n\n//  TextButton Component\nexport const TextButton = (props: TextButtonProp): JSX.Element => {\n    const style: Properties = {};\n    const computedBackgroundColor: BackgroundColor =\n        props.backgroundColor ?? ColorPalette.Primary;\n\n    if (props.backgroundImage === undefined) {\n        if (props.backgroundColor === undefined) {\n            style.backgroundColor = `var(--${ColorPalette.Primary}-color)`;\n            style.color = handleTextColor(props.textColor, ColorPalette.Accent);\n        } else if (isColorPalette(props.backgroundColor)) {\n            style.backgroundColor = `var(--${props.backgroundColor}-color)`;\n            style.color = handleTextColor(\n                props.textColor,\n                getColorPaletteComplement(props.backgroundColor),\n            );\n        } else {\n            style.backgroundColor = props.backgroundColor;\n            style.color = handleTextColor(props.textColor, ColorPalette.Accent);\n        }\n\n        style[\"--on-hover-background-color\"] = handleContrastColor(\n            computedBackgroundColor,\n            props.onHoverContrastColor,\n        );\n    } else {\n        if (isGradient(props.backgroundImage)) {\n            style.backgroundImage = `var(--${props.backgroundImage}-color-gradient)`;\n            style.color = handleTextColor(\n                props.textColor,\n                getGradientComplement(props.backgroundImage as Gradient),\n            );\n        } else {\n            style.backgroundImage = props.backgroundImage;\n            style.color = handleTextColor(props.textColor, ColorPalette.Accent);\n        }\n\n        style[\"--on-hover-background-image\"] = handleContrastColorImage(\n            props.backgroundImage,\n            props.onHoverContrastColor,\n        );\n    }\n\n    const onMouseDown = (mouseEvent: MouseEvent) => {\n        button = mouseEvent.currentTarget as HTMLDivElement;\n\n        if (mouseEvent.buttons === 1) {\n            mouseEvent.stopPropagation();\n\n            mouseDown = true;\n            transitionFinished = false;\n\n            const transitionDuration =\n                window.getComputedStyle(button).transitionDuration;\n\n            button.classList.add(\"pressed\");\n\n            setTimeout(() => {\n                transitionFinished = true;\n\n                if (!mouseDown) {\n                    button.classList.remove(\"pressed\");\n                }\n            }, parseFloat(transitionDuration.substring(0, transitionDuration.indexOf(\"s\"))) * 1000);\n        }\n    };\n\n    const onMouseUp = (mouseEvent: MouseEvent) => {\n        props.onClick?.(mouseEvent);\n\n        if (props.href) {\n            window.location.assign(props.href);\n        }\n    };\n\n    document.onmouseup = (mouseEvent: globalThis.MouseEvent) => {\n        mouseEvent.stopPropagation();\n\n        mouseDown = false;\n\n        if (transitionFinished) {\n            button.classList.remove(\"pressed\");\n        }\n    };\n\n    return (\n        <div\n            className={`button ${props.className}`}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}\n            style={style}\n        >\n            <span unselectable=\"on\">{props.text}</span>\n        </div>\n    );\n};\n\nexport default TextButton;\n","import TextButton from \"./components/button/button\";\nimport \"./app.css\";\n\nconst App = () => {\n    document.documentElement.setAttribute(\"theme\", \"dark\");\n\n    return (\n        <main>\n            <TextButton text=\"Summarize\" />\n        </main>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport \"./styles.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}